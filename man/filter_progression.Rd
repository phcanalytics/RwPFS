% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_progression.R
\name{filter_progression}
\alias{filter_progression}
\title{Returns information on real-world progression, filtering & aggregating Flatiron's progression table}
\usage{
filter_progression(
  .progression_table,
  .start_date = NULL,
  .require_radiographic = NULL,
  .exclude_pseudoprogression = NULL,
  .discard_n_days = NULL,
  .label = "",
  .prog_filter_expression = NULL
)
}
\arguments{
\item{.progression_table}{a data frame with column structure identical to Flatiron's progression table plus an additional column
containing the baseline date of the analysis.}

\item{.start_date}{character. The name of a date column in .progression_table that represents
the baseline date}

\item{.require_radiographic}{logical. Should only radiographically confirmed progression
events be considered?}

\item{.exclude_pseudoprogression}{logical. Should progression events with mention of
pseudoprogression be excluded?}

\item{.discard_n_days}{integer. Number of days after baseline where progression events
will be discarded. Choose 0 to not discard any.}

\item{.label}{character. Label to keep apart different progression variables in the same dataset.}

\item{.prog_filter_expression}{character. A string containing R code (including unquoted
progression table column names) that evaluates to TRUE for all progression events that should be included.
Allows for fine-grained selection of events and use with all datamarts. Will be combined with \code{require_radiographic}
and \code{exclude_pseudoprogression} using logical AND.}
}
\value{
Returns a data frame with the following three columns.

\strong{New Columns:}

\describe{

\item{patientid}{Patient ID}

\item{progressiondate<label>}{The date of the first progression event occurring at least \code{discard_n_days} after start_date and passing the
filtering criteria specified using the \code{require_radiographic}, \code{exclude_pseudoprogression} and \code{prog_filter_expression} arguments.
\code{NA} if no progression event satisfies all criteria.}

\item{lastclinicnotedate<label>}{The date up to which real-world progression was abstracted in the database. \code{NA} if lastclinicnotedate
is missing or before start_date}

}
}
\description{
Filters and aggregates Flatiron's progression table and returns a dataframe with three columns: the patient id, the date of first progression occurring at least \code{discard_n_days} after start_date, and the
date up to which progression information was abstracted. A subset of progression events to be considered can be specified.
}
\examples{

\dontrun{

#Note: the FlatironKitchen package is used in these
#examples for simplicity. This is not a requirement.

library(FlatironKitchen)
library(dplyr)

#Initialize FlatironKitchen object
fk <- fi_start(datamart = "AdvancedNSCLC",
               title = "rwPFS in aNSCLC")  \%>\%
  
  #Use start of line as start_date
  fi_add_lineoftherapy_flatiron(
    lines = c(1, 2),
    index_date = "advanceddiagnosisdate",
    left = 0,
    right = 90,
    calc_duration = FALSE
  ) \%>\%
  
  #Restrict to Carboplatin & Paclitaxel in 1st line
  fi_cohort_include(
    lot1linename == "Carboplatin,Paclitaxel",
    description = "Carboplatin & Paclitaxel in 1st line",
    keep_na = FALSE
  ) 

#Pull the analysis dataset from 
#the FlatironKitchen object
df <- fk \%>\%
  fi_pull_data()

#Download the progression table belonging
#to the current datamart
progression <- fk \%>\%
  fi_read_table(table_name="ENHANCED_ADVNSCLCPROGRESSION") \%>\%
  collect()
  
#Add progression information to analysis dataset
df <- df \%>\%
  #select the start_date column..
  select(patientid, lot1startdate) \%>\%
  
  #..and add it to the raw progression table
  left_join(progression, by = "patientid") \%>\%
  
  #Aggregate progression information (one-row per patient)
  filter_progression(
    .start_date = "lot1startdate",
    .require_radiographic = FALSE,
    .exclude_pseudoprogression = TRUE,
    .discard_n_days = 0,
    .label = "_no_pseudo_no_mixed",
    .prog_filter_expression = "ismixedresponse == 'No'"
  ) \%>\%
  
  #Combine progression columns with analysis dataset
  right_join(df, by = "patientid")
}

}
